package io.shaka.esgc

import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import java.math.BigDecimal

@JsonIgnoreProperties(ignoreUnknown = true)
data class ZettlePurchasesResponse(
    val purchases: List<ZettlePurchase> = emptyList(),
    val firstPurchaseHash: String? = null,
    val lastPurchaseHash: String? = null
)

@JsonIgnoreProperties(ignoreUnknown = true)
data class ZettlePurchase(
    val source: String? = null,
    val purchaseUUID: String,
    val purchaseUUID1: String? = null,
    val timestamp: String,
    val purchaseNumber: Int? = null,
    val globalPurchaseNumber: Int? = null,
    val amount: Long, // Amount in minor units (cents/Ã¶re)
    val vatAmount: Long? = null,
    val country: String? = null,
    val currency: String? = null,
    val refund: Boolean? = false,
    val refunded: Boolean? = false,
    val userDisplayName: String? = null,
    val userId: Long? = null,
    val organizationId: Long? = null,
    val products: List<ZettleProduct> = emptyList(),
    val payments: List<ZettlePayment> = emptyList(),
    val discounts: List<ZettleDiscount> = emptyList(),
    val gpsCoordinates: ZettleGpsCoordinates? = null
) {
    val amountInMajorUnits: BigDecimal
        get() = amount.let { BigDecimal(it).movePointLeft(2) } ?: BigDecimal.ZERO

    val description: String
        get() = "$userDisplayName ${products.firstOrNull()?.name ?: "Purchase $purchaseNumber"}"
}

@JsonIgnoreProperties(ignoreUnknown = true)
data class ZettleProduct(
    val quantity: String? = null,
    val productUuid: String? = null,
    val variantUuid: String? = null,
    val vatPercentage: Double? = null,
    val unitPrice: Long? = null,
    val rowTaxableAmount: Long? = null,
    val name: String? = null,
    val variantName: String? = null,
    val type: String? = null,
    val libraryProduct: Boolean? = false,
    val autoGenerated: Boolean? = false
)

@JsonIgnoreProperties(ignoreUnknown = true)
data class ZettlePayment(
    val uuid: String? = null,
    val type: String? = null,
    val amount: Long? = null,
    val gratuityAmount: Long? = null,
    val cardPaymentUUID: String? = null,
    val cardPaymentUUID1: String? = null
)

@JsonIgnoreProperties(ignoreUnknown = true)
data class ZettleDiscount(
    val name: String? = null,
    val percentage: Double? = null,
    val value: Long? = null
)

@JsonIgnoreProperties(ignoreUnknown = true)
data class ZettleGpsCoordinates(
    val latitude: Double? = null,
    val longitude: Double? = null,
    val accuracyMeters: Int? = null
)

@JsonIgnoreProperties(ignoreUnknown = true)
data class ZettleFinanceTransaction(
    val timestamp: String,
    val amount: Long? = null, // Amount in minor units (pence)
    val originatorTransactionType: String,
    val originatingTransactionUuid: String? = null
) {
    val amountInMajorUnits: BigDecimal
        get() = amount?.let { BigDecimal(it).movePointLeft(2) } ?: BigDecimal.ZERO

    val isPayment: Boolean
        get() = originatorTransactionType == "PAYMENT"

}